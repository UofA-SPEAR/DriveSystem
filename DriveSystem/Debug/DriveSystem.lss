
DriveSystem.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  0000018c  00000220  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000018c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  0080011c  0080011c  0000023c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000023c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000026c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  000002ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009e1  00000000  00000000  00000304  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000812  00000000  00000000  00000ce5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000038d  00000000  00000000  000014f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000009c  00000000  00000000  00001884  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003e0  00000000  00000000  00001920  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000ee  00000000  00000000  00001d00  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00001dee  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 80 00 	jmp	0x100	; 0x100 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e8       	ldi	r30, 0x8C	; 140
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 31       	cpi	r26, 0x1C	; 28
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e1       	ldi	r26, 0x1C	; 28
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 32       	cpi	r26, 0x24	; 36
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 c4 00 	jmp	0x188	; 0x188 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
volatile bool flag = false;
volatile char ReceivedByte;
int main (void) {

	//// set as output pins
	DDRB |= _BV(DDB5);
  a6:	25 9a       	sbi	0x04, 5	; 4
	PORTB |= _BV(PORTB5);
  a8:	2d 9a       	sbi	0x05, 5	; 5

	//Initialize
	stdout = &uart_output;
  aa:	ee e1       	ldi	r30, 0x1E	; 30
  ac:	f1 e0       	ldi	r31, 0x01	; 1
  ae:	8e e0       	ldi	r24, 0x0E	; 14
  b0:	91 e0       	ldi	r25, 0x01	; 1
  b2:	93 83       	std	Z+3, r25	; 0x03
  b4:	82 83       	std	Z+2, r24	; 0x02
	stdin =  &uart_input;
  b6:	80 e0       	ldi	r24, 0x00	; 0
  b8:	91 e0       	ldi	r25, 0x01	; 1
  ba:	91 83       	std	Z+1, r25	; 0x01
  bc:	80 83       	st	Z, r24
	uart_init();
  be:	0e 94 9b 00 	call	0x136	; 0x136 <uart_init>

	TCCR1B |= (1 << WGM12); // configure timer1 for CTC mode
  c2:	e1 e8       	ldi	r30, 0x81	; 129
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	80 81       	ld	r24, Z
  c8:	88 60       	ori	r24, 0x08	; 8
  ca:	80 83       	st	Z, r24

	TIMSK1 |= (1 << OCIE1A); // enable the CTC interrupt b 
  cc:	af e6       	ldi	r26, 0x6F	; 111
  ce:	b0 e0       	ldi	r27, 0x00	; 0
  d0:	8c 91       	ld	r24, X
  d2:	82 60       	ori	r24, 0x02	; 2
  d4:	8c 93       	st	X, r24
	

	sei(); // enable global interrupts
  d6:	78 94       	sei

	OCR1A   = 19531/10; // set the CTC compare value
  d8:	81 ea       	ldi	r24, 0xA1	; 161
  da:	97 e0       	ldi	r25, 0x07	; 7
  dc:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  e0:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>

	TCCR1B |= ((1 << CS10) | (1 << CS12)); // start the timer at 20MHz/1024
  e4:	80 81       	ld	r24, Z
  e6:	85 60       	ori	r24, 0x05	; 5
  e8:	80 83       	st	Z, r24

	while(1) { // main loop - do anything you like here!
		while(flag == false);
		flag = false;
		PORTB ^= _BV(PORTB5); // toggle the LED
  ea:	90 e2       	ldi	r25, 0x20	; 32
	OCR1A   = 19531/10; // set the CTC compare value

	TCCR1B |= ((1 << CS10) | (1 << CS12)); // start the timer at 20MHz/1024

	while(1) { // main loop - do anything you like here!
		while(flag == false);
  ec:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
  f0:	88 23       	and	r24, r24
  f2:	e1 f3       	breq	.-8      	; 0xec <main+0x46>
		flag = false;
  f4:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <__data_end>
		PORTB ^= _BV(PORTB5); // toggle the LED
  f8:	85 b1       	in	r24, 0x05	; 5
  fa:	89 27       	eor	r24, r25
  fc:	85 b9       	out	0x05, r24	; 5
	}
  fe:	f6 cf       	rjmp	.-20     	; 0xec <main+0x46>

00000100 <__vector_18>:

}

ISR(USART_RX_vect) {
 100:	1f 92       	push	r1
 102:	0f 92       	push	r0
 104:	0f b6       	in	r0, 0x3f	; 63
 106:	0f 92       	push	r0
 108:	11 24       	eor	r1, r1
 10a:	8f 93       	push	r24
 10c:	ef 93       	push	r30
 10e:	ff 93       	push	r31
	ReceivedByte = UDR0; // Fetch the received byte value into the variable "ByteReceived"
 110:	e6 ec       	ldi	r30, 0xC6	; 198
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	80 81       	ld	r24, Z
 116:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <ReceivedByte>
	UDR0 = ReceivedByte; // Echo back the received byte back to the computer
 11a:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <ReceivedByte>
 11e:	80 83       	st	Z, r24
	flag = true;
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <__data_end>
	
}
 126:	ff 91       	pop	r31
 128:	ef 91       	pop	r30
 12a:	8f 91       	pop	r24
 12c:	0f 90       	pop	r0
 12e:	0f be       	out	0x3f, r0	; 63
 130:	0f 90       	pop	r0
 132:	1f 90       	pop	r1
 134:	18 95       	reti

00000136 <uart_init>:
#include <util/setbaud.h>

/* http://www.cs.mun.ca/~rod/Winter2007/4723/notes/serial/serial.html */

void uart_init() {
	UBRR0H = UBRRH_VALUE;
 136:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = UBRRL_VALUE;
 13a:	87 e6       	ldi	r24, 0x67	; 103
 13c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	
	#if USE_2X
	UCSR0A |= _BV(U2X0);
	#else
	UCSR0A &= ~(_BV(U2X0));
 140:	e0 ec       	ldi	r30, 0xC0	; 192
 142:	f0 e0       	ldi	r31, 0x00	; 0
 144:	80 81       	ld	r24, Z
 146:	8d 7f       	andi	r24, 0xFD	; 253
 148:	80 83       	st	Z, r24
	#endif

	UCSR0C = _BV(UCSZ01) | _BV(UCSZ00); /* 8-bit data */
 14a:	86 e0       	ldi	r24, 0x06	; 6
 14c:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	UCSR0B = _BV(RXEN0) | _BV(TXEN0) | _BV(RXCIE0);   /* Enable RX and TX */
 150:	88 e9       	ldi	r24, 0x98	; 152
 152:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 156:	08 95       	ret

00000158 <uart_putchar>:
	
}

void uart_putchar(char c, FILE *stream) {
 158:	cf 93       	push	r28
 15a:	c8 2f       	mov	r28, r24
	if (c == '\n') {
 15c:	8a 30       	cpi	r24, 0x0A	; 10
 15e:	19 f4       	brne	.+6      	; 0x166 <uart_putchar+0xe>
		uart_putchar('\r', stream);
 160:	8d e0       	ldi	r24, 0x0D	; 13
 162:	0e 94 ac 00 	call	0x158	; 0x158 <uart_putchar>
	}
	loop_until_bit_is_set(UCSR0A, UDRE0);
 166:	e0 ec       	ldi	r30, 0xC0	; 192
 168:	f0 e0       	ldi	r31, 0x00	; 0
 16a:	80 81       	ld	r24, Z
 16c:	85 ff       	sbrs	r24, 5
 16e:	fd cf       	rjmp	.-6      	; 0x16a <uart_putchar+0x12>
	UDR0 = c;
 170:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}
 174:	cf 91       	pop	r28
 176:	08 95       	ret

00000178 <uart_getchar>:

char uart_getchar(FILE *stream) {
	loop_until_bit_is_set(UCSR0A, RXC0);
 178:	e0 ec       	ldi	r30, 0xC0	; 192
 17a:	f0 e0       	ldi	r31, 0x00	; 0
 17c:	80 81       	ld	r24, Z
 17e:	88 23       	and	r24, r24
 180:	ec f7       	brge	.-6      	; 0x17c <uart_getchar+0x4>
	return UDR0;
 182:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 186:	08 95       	ret

00000188 <_exit>:
 188:	f8 94       	cli

0000018a <__stop_program>:
 18a:	ff cf       	rjmp	.-2      	; 0x18a <__stop_program>
