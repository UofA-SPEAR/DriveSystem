
DriveSystem.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000168  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000f4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  00000168  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000168  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000198  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000001d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006bb  00000000  00000000  00000200  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000628  00000000  00000000  000008bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000238  00000000  00000000  00000ee3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000044  00000000  00000000  0000111c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000035c  00000000  00000000  00001160  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000003c  00000000  00000000  000014bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  000014f8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__vector_11>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 78 00 	jmp	0xf0	; 0xf0 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:
volatile bool flag = false;

int main (void) {

	//// set as output pins
	DDRB |= _BV(DDB5);
  90:	25 9a       	sbi	0x04, 5	; 4
	PORTB |= _BV(PORTB5);
  92:	2d 9a       	sbi	0x05, 5	; 5

	

	TCCR1B |= (1 << WGM12); // configure timer1 for CTC mode
  94:	e1 e8       	ldi	r30, 0x81	; 129
  96:	f0 e0       	ldi	r31, 0x00	; 0
  98:	80 81       	ld	r24, Z
  9a:	88 60       	ori	r24, 0x08	; 8
  9c:	80 83       	st	Z, r24

	TIMSK1 |= (1 << OCIE1A); // enable the CTC interrupt b 
  9e:	af e6       	ldi	r26, 0x6F	; 111
  a0:	b0 e0       	ldi	r27, 0x00	; 0
  a2:	8c 91       	ld	r24, X
  a4:	82 60       	ori	r24, 0x02	; 2
  a6:	8c 93       	st	X, r24

	sei(); // enable global interrupts
  a8:	78 94       	sei

	OCR1A   = 19531/10; // set the CTC compare value
  aa:	81 ea       	ldi	r24, 0xA1	; 161
  ac:	97 e0       	ldi	r25, 0x07	; 7
  ae:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  b2:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>

	TCCR1B |= ((1 << CS10) | (1 << CS12)); // start the timer at 20MHz/1024
  b6:	80 81       	ld	r24, Z
  b8:	85 60       	ori	r24, 0x05	; 5
  ba:	80 83       	st	Z, r24

	while(1) { // main loop - do anything you like here!
		while(flag == false);
		PORTB ^= _BV(PORTB5); // toggle the LED
  bc:	90 e2       	ldi	r25, 0x20	; 32
	OCR1A   = 19531/10; // set the CTC compare value

	TCCR1B |= ((1 << CS10) | (1 << CS12)); // start the timer at 20MHz/1024

	while(1) { // main loop - do anything you like here!
		while(flag == false);
  be:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  c2:	88 23       	and	r24, r24
  c4:	e1 f3       	breq	.-8      	; 0xbe <main+0x2e>
		PORTB ^= _BV(PORTB5); // toggle the LED
  c6:	85 b1       	in	r24, 0x05	; 5
  c8:	89 27       	eor	r24, r25
  ca:	85 b9       	out	0x05, r24	; 5
		flag = false;
  cc:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
	}
  d0:	f6 cf       	rjmp	.-20     	; 0xbe <main+0x2e>

000000d2 <__vector_11>:

}



ISR(TIMER1_COMPA_vect) { // this function is called every time the timer reaches the threshold we set
  d2:	1f 92       	push	r1
  d4:	0f 92       	push	r0
  d6:	0f b6       	in	r0, 0x3f	; 63
  d8:	0f 92       	push	r0
  da:	11 24       	eor	r1, r1
  dc:	8f 93       	push	r24

	
	flag = true;
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>

}
  e4:	8f 91       	pop	r24
  e6:	0f 90       	pop	r0
  e8:	0f be       	out	0x3f, r0	; 63
  ea:	0f 90       	pop	r0
  ec:	1f 90       	pop	r1
  ee:	18 95       	reti

000000f0 <_exit>:
  f0:	f8 94       	cli

000000f2 <__stop_program>:
  f2:	ff cf       	rjmp	.-2      	; 0xf2 <__stop_program>
